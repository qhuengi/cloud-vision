import miscutils
import cv2 as cv
import numpy as np
import copy
SDTHRESH=0.013
SIZETHRESH=30000
    
cloud = cv.imread(r'D:\Users\me\Downloads\B1.jpg')
mapped = miscutils.brMap(cloud)
cv.imshow('mapped',mapped)
th = miscutils.hytaThreshold(mapped) 
cv.imshow('thresh',th)
contours, hier = cv.findContours(th, cv.RETR_TREE, cv.CHAIN_APPROX_SIMPLE)
# removes contours which are children of other contours
indices = filter(lambda x: hier[0][x][3] < 0, range(len(hier[0])))
contoursFiltered = list(map(lambda x: contours[x],indices))
imContours=copy.deepcopy(cloud)
cv.drawContours(imContours,contoursFiltered,-1,(0,255,0),3)
cv.imshow('contours',imContours)
# finds bounding rectangles of filtered contours
boundRects = list(map(cv.boundingRect,contoursFiltered))
ugh=copy.deepcopy(cloud)
for rect in boundRects:
    cv.rectangle(ugh, (rect[0],rect[1]),(rect[0]+rect[2],rect[1]+rect[3]), (255,0,0),2)
# maps each rect to list of smaller rects generated by split, filters non-cloud rects
filtered = lambda x: miscutils.filterRect(mapped, x)
splitRects = list(map(lambda x: list(filter(filtered,miscutils.split(mapped,x,sdthreshold=SDTHRESH,sizethreshold=SIZETHRESH))),boundRects))
test=copy.deepcopy(cloud)
for rects in splitRects:
    for rect in rects:
        cv.rectangle(test, (rect[0],rect[1]),(rect[0]+rect[2],rect[1]+rect[3]), (255,0,0),2)
cv.imshow('test',test)
cv.imshow('ff',ugh)
while cv.waitKey() == -1:
    pass
